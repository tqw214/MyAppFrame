apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    //android { compileOptions.encoding = "UTF-8" }

    defaultConfig {
        applicationId "com.viger.myappframe"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        flavorDimensions "default"
    }

    signingConfigs {
        debug {}
        release {
            storeFile file("viger.jks")
            storePassword "1q2w3e4r"
            keyAlias "viger"
            keyPassword "1q2w3e4r"
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        //这是自定义的 buildType，继承自 debug
        /*jnidebug {
            initWith debug
            applicationIdSuffix ".jnidebug"
            jniDebuggable true
        }*/
    }

    //设置打包格式
//    applicationVariants.all {
//        //判断是release还是debug版本
//        def buildType = it.buildType.name
//        def fileName
//        //下面的channel是获取渠道号，你获取渠道号不一定会和我的代码一样，因为有可能你的渠道名称的规则和我的不一样，我的规则是${渠道名}-${applicationId},所以我是这样取的。
//        def channel = it.productFlavors[0].name.split("-")[0]
//        //获取当前时间的"YYYY-MM-dd"格式。
//        def createTime = new Date().format("YYYY-MM-dd", TimeZone.getTimeZone("GMT+08:00"))
//        //只对Release包起作用，如果不是Release包则不变更输出路径，否则可能导致AS无法自动安装debug包。
//        if (buildType == "release") {
//            //it.getPackageApplication().outputDirectory = new File(project.rootDir.absolutePath + "/apks/${it.productFlavors[0].applicationId}/${createTime}")
//            it.getPackageApplication().outputDirectory = new File(project.rootDir.absolutePath + "/apks/")
//        }
//        it.outputs.each {
//            //只对Release包起作用，如果不是Release包则不变更名称。
//            if (buildType == "release") {
//                //我此处的命名规则是：渠道名_项目名_版本名_创建时间_构建类型.apk
//                fileName = "玩安卓_v${defaultConfig.versionName}_${channel}_${createTime}-${buildType}.apk"
//                //将名字打印出来，以便及时查看是否满意。
//                println "文件名：-----------------${fileName}"
//                //重新对apk命名。(适用于Gradle4.0以下版本)
//                //it.outputFile = new File(it.outputFile.parent, fileName)
//                //重新对apk命名。(适用于Gradle4.0（含）以上版本)如果你Gradle版本是4.0以下版本则将上面的一行代码放开并注释下面的这一行。
//                it.outputFileName = fileName
//            }
//        }
//    }

    //多渠道打包
    productFlavors {
        xiaomi {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "xiaomi"]
            applicationId "com.viger.myappframe.xiaomi"
            versionName "1.0-mi"
        }
        baidu {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "baidu"]
            applicationId "com.viger.myappframe.baidu"
            versionName "1.0-du"
        }
//        free {
//            dimension "default"
//            applicationIdSuffix ".free"
//            versionNameSuffix "-free"
//            buildConfigField "String", "NAME", "\"免费版\""
//        }
    }

//    productFlavors.all { flavor ->
//        flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
//    }

    //支持java8
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    //implementation rootProject.ext.dependencies["appcompat-v7"]
    //implementation rootProject.ext.dependencies["support-v4"]
    implementation rootProject.ext.dependencies["recyclerview"]
    implementation rootProject.ext.dependencies["design"]
    implementation rootProject.ext.dependencies["constraint-layout"]
    //ui
    implementation rootProject.ext.dependencies["flexibleflowlayout"]
    implementation rootProject.ext.dependencies["SmartRefreshLayout"]
    implementation rootProject.ext.dependencies["SmartRefreshHeader"]
    implementation rootProject.ext.dependencies["convenientbanner"]
    implementation rootProject.ext.dependencies["BaseRecyclerViewAdapterHelper"]
    implementation rootProject.ext.dependencies["lottie"]
    implementation rootProject.ext.dependencies["verticalTabLayout"]
    //http
    implementation rootProject.ext.dependencies["okhttp"]
    implementation rootProject.ext.dependencies["logging-interceptor"]
    implementation rootProject.ext.dependencies["gson"]
    implementation rootProject.ext.dependencies["converter-gson"]
    implementation rootProject.ext.dependencies["converter-scalars"]
    implementation rootProject.ext.dependencies["retrofit"]
    //rx
    implementation rootProject.ext.dependencies["adapter-rxjava2"]
    implementation rootProject.ext.dependencies["rxjava"]
    implementation rootProject.ext.dependencies["rxandroid"]
    implementation rootProject.ext.dependencies["rxbinding"]
    implementation rootProject.ext.dependencies["rxpermissions"]
    implementation rootProject.ext.dependencies["rxlifecycle"]
    //fragmentation
    implementation rootProject.ext.dependencies["fragmentation"]
    implementation rootProject.ext.dependencies["fragmentation-swipeback"]
    //butterknife
    implementation rootProject.ext.dependencies["butterknife"]
    annotationProcessor rootProject.ext.dependencies["butterknife-compiler"]
    //dagger
    implementation rootProject.ext.dependencies["dagger"]
    annotationProcessor rootProject.ext.dependencies["dagger-compiler"]
    implementation rootProject.ext.dependencies["dagger-android"]
    implementation rootProject.ext.dependencies["dagger-android-support"]
    annotationProcessor rootProject.ext.dependencies["dagger-android-processor"]
    implementation rootProject.ext.dependencies["javax_annotation"]
    //db
    implementation rootProject.ext.dependencies["greendao"]
    //glide
    implementation rootProject.ext.dependencies["glide"]
    annotationProcessor rootProject.ext.dependencies["glide_compiler"]
}
